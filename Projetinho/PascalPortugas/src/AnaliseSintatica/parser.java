
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 20 15:00:26 BRT 2019
//----------------------------------------------------

package AnaliseSintatica;

import java.io.*;
import java_cup.runtime.*;
import AnaliseSintatica.Yylex;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 20 15:00:26 BRT 2019
  */
public class parser extends java_cup.runtime.lr_parser {

private static Interface it = new Interface();  
    
  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
//  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}
  public parser(java_cup.runtime.Scanner s, Interface i) {super(s); it = i;}

 
  public static void main (String args[]) throws Exception{
        //new parser(new Yylex(new FileInputStream(args[0]))).parse();
        new parser(new Yylex(System.in), it).parse();
} 


  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\003\000\002\002" +
    "\006\000\002\002\010\000\002\002\011\000\002\002\012" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\006\000\002\003\005\000\002\003\005\000\002" +
    "\006\010\000\002\006\012\000\002\006\010\000\002\006" +
    "\011\000\002\007\024\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\011\005\000\002\011\006\000\002\011\006\000\002\011" +
    "\007\000\002\012\004\000\002\004\007\000\002\004\011" +
    "\000\002\004\013\000\002\004\015\000\002\004\007\000" +
    "\002\004\011\000\002\004\013\000\002\004\007\000\002" +
    "\004\011\000\002\004\013\000\002\004\014\000\002\004" +
    "\014\000\002\004\014\000\002\004\014\000\002\004\014" +
    "\000\002\004\014\000\002\005\006\000\002\005\006\000" +
    "\002\005\010\000\002\005\010\000\002\005\010\000\002" +
    "\005\016\000\002\005\016\000\002\005\024\000\002\005" +
    "\022\000\002\013\007\000\002\013\007\000\002\013\010" +
    "\000\002\013\010\000\002\013\011\000\002\013\011\000" +
    "\002\013\012\000\002\013\012\000\002\013\013\000\002" +
    "\013\013\000\002\013\014\000\002\013\014\000\002\013" +
    "\015\000\002\013\015" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\004\004\005\001\002\000\004\002\362\001" +
    "\002\000\010\002\000\005\007\007\006\001\002\000\004" +
    "\020\012\001\002\000\004\006\010\001\002\000\004\021" +
    "\011\001\002\000\004\002\uffff\001\002\000\006\005\015" +
    "\012\013\001\002\000\004\007\276\001\002\000\004\005" +
    "\272\001\002\000\020\006\027\007\030\011\023\022\022" +
    "\024\017\030\021\031\016\001\002\000\004\007\030\001" +
    "\002\000\004\013\255\001\002\000\004\006\ufffa\001\002" +
    "\000\004\013\227\001\002\000\004\013\143\001\002\000" +
    "\004\013\115\001\002\000\004\006\ufff9\001\002\000\004" +
    "\006\113\001\002\000\016\006\ufffb\011\023\022\022\024" +
    "\017\030\021\031\016\001\002\000\004\021\104\001\002" +
    "\000\004\010\031\001\002\000\006\007\032\017\033\001" +
    "\002\000\006\016\055\020\054\001\002\000\006\016\035" +
    "\020\034\001\002\000\020\006\uffd2\007\040\011\uffd2\022" +
    "\uffd2\024\uffd2\030\uffd2\031\uffd2\001\002\000\004\007\036" +
    "\001\002\000\004\020\037\001\002\000\016\006\uffcf\011" +
    "\uffcf\022\uffcf\024\uffcf\030\uffcf\031\uffcf\001\002\000\004" +
    "\010\041\001\002\000\004\017\042\001\002\000\004\020" +
    "\043\001\002\000\004\007\044\001\002\000\004\010\045" +
    "\001\002\000\004\017\046\001\002\000\004\020\047\001" +
    "\002\000\020\006\uffcd\007\050\011\uffcd\022\uffcd\024\uffcd" +
    "\030\uffcd\031\uffcd\001\002\000\004\010\051\001\002\000" +
    "\004\017\052\001\002\000\004\020\053\001\002\000\016" +
    "\006\uffcb\011\uffcb\022\uffcb\024\uffcb\030\uffcb\031\uffcb\001" +
    "\002\000\016\006\uffd3\011\uffd3\022\uffd3\024\uffd3\030\uffd3" +
    "\031\uffd3\001\002\000\006\007\056\017\057\001\002\000" +
    "\004\020\075\001\002\000\004\020\060\001\002\000\020" +
    "\006\uffd0\007\061\011\uffd0\022\uffd0\024\uffd0\030\uffd0\031" +
    "\uffd0\001\002\000\004\010\062\001\002\000\004\007\063" +
    "\001\002\000\004\016\064\001\002\000\004\007\065\001" +
    "\002\000\004\020\066\001\002\000\004\007\067\001\002" +
    "\000\004\010\070\001\002\000\004\007\071\001\002\000" +
    "\004\016\072\001\002\000\004\017\073\001\002\000\004" +
    "\020\074\001\002\000\016\006\uffcc\011\uffcc\022\uffcc\024" +
    "\uffcc\030\uffcc\031\uffcc\001\002\000\020\006\uffd1\007\076" +
    "\011\uffd1\022\uffd1\024\uffd1\030\uffd1\031\uffd1\001\002\000" +
    "\004\010\077\001\002\000\004\007\100\001\002\000\004" +
    "\016\101\001\002\000\004\017\102\001\002\000\004\020" +
    "\103\001\002\000\016\006\uffce\011\uffce\022\uffce\024\uffce" +
    "\030\uffce\031\uffce\001\002\000\004\002\ufffe\001\002\000" +
    "\010\022\022\024\017\031\016\001\002\000\014\011\023" +
    "\022\022\024\017\030\021\031\016\001\002\000\004\006" +
    "\ufff7\001\002\000\004\006\ufff6\001\002\000\006\011\023" +
    "\030\021\001\002\000\004\006\ufff8\001\002\000\004\021" +
    "\114\001\002\000\004\002\ufffd\001\002\000\004\007\116" +
    "\001\002\000\006\007\120\014\117\001\002\000\004\020" +
    "\142\001\002\000\006\007\122\014\121\001\002\000\004" +
    "\020\141\001\002\000\006\007\123\014\124\001\002\000" +
    "\006\007\127\014\126\001\002\000\004\020\125\001\002" +
    "\000\014\006\uffc6\022\uffc6\024\uffc6\027\uffc6\031\uffc6\001" +
    "\002\000\004\020\140\001\002\000\006\007\130\014\131" +
    "\001\002\000\006\007\133\014\134\001\002\000\004\020" +
    "\132\001\002\000\014\006\uffc2\022\uffc2\024\uffc2\027\uffc2" +
    "\031\uffc2\001\002\000\004\014\136\001\002\000\004\020" +
    "\135\001\002\000\014\006\uffc0\022\uffc0\024\uffc0\027\uffc0" +
    "\031\uffc0\001\002\000\004\020\137\001\002\000\014\006" +
    "\uffbe\022\uffbe\024\uffbe\027\uffbe\031\uffbe\001\002\000\014" +
    "\006\uffc4\022\uffc4\024\uffc4\027\uffc4\031\uffc4\001\002\000" +
    "\014\006\uffc8\022\uffc8\024\uffc8\027\uffc8\031\uffc8\001\002" +
    "\000\014\006\uffca\022\uffca\024\uffca\027\uffca\031\uffca\001" +
    "\002\000\006\007\144\017\146\001\002\000\006\015\222" +
    "\035\221\001\002\000\004\014\155\001\002\000\006\015" +
    "\150\035\147\001\002\000\006\007\153\017\154\001\002" +
    "\000\006\007\151\017\152\001\002\000\004\014\uffee\001" +
    "\002\000\004\014\uffed\001\002\000\004\014\uffea\001\002" +
    "\000\004\014\uffe9\001\002\000\004\023\156\001\002\000" +
    "\004\005\160\001\002\000\020\006\ufff5\011\ufff5\022\ufff5" +
    "\024\ufff5\026\217\030\ufff5\031\ufff5\001\002\000\014\006" +
    "\161\007\030\011\023\022\163\030\021\001\002\000\004" +
    "\020\216\001\002\000\004\006\214\001\002\000\004\013" +
    "\173\001\002\000\004\007\030\001\002\000\004\006\166" +
    "\001\002\000\004\020\167\001\002\000\022\006\uffe7\007" +
    "\uffe7\011\uffe7\022\uffe7\024\uffe7\026\uffe7\030\uffe7\031\uffe7" +
    "\001\002\000\004\006\171\001\002\000\004\020\172\001" +
    "\002\000\022\006\uffe5\007\uffe5\011\uffe5\022\uffe5\024\uffe5" +
    "\026\uffe5\030\uffe5\031\uffe5\001\002\000\006\007\144\017" +
    "\146\001\002\000\004\014\175\001\002\000\004\023\176" +
    "\001\002\000\004\005\160\001\002\000\004\022\200\001" +
    "\002\000\004\013\201\001\002\000\006\007\144\017\146" +
    "\001\002\000\004\014\203\001\002\000\004\023\204\001" +
    "\002\000\004\005\160\001\002\000\004\022\206\001\002" +
    "\000\004\013\207\001\002\000\006\007\144\017\146\001" +
    "\002\000\004\014\211\001\002\000\004\023\212\001\002" +
    "\000\004\005\160\001\002\000\004\007\ufff1\001\002\000" +
    "\004\020\215\001\002\000\022\006\uffe6\007\uffe6\011\uffe6" +
    "\022\uffe6\024\uffe6\026\uffe6\030\uffe6\031\uffe6\001\002\000" +
    "\022\006\uffe8\007\uffe8\011\uffe8\022\uffe8\024\uffe8\026\uffe8" +
    "\030\uffe8\031\uffe8\001\002\000\004\005\160\001\002\000" +
    "\016\006\ufff4\011\ufff4\022\ufff4\024\ufff4\030\ufff4\031\ufff4" +
    "\001\002\000\006\007\225\017\226\001\002\000\006\007" +
    "\223\017\224\001\002\000\004\014\ufff0\001\002\000\004" +
    "\014\uffef\001\002\000\004\014\uffec\001\002\000\004\014" +
    "\uffeb\001\002\000\004\007\230\001\002\000\006\007\232" +
    "\014\231\001\002\000\004\020\254\001\002\000\006\007" +
    "\234\014\233\001\002\000\004\020\253\001\002\000\006" +
    "\007\236\014\235\001\002\000\004\020\252\001\002\000" +
    "\006\007\240\014\237\001\002\000\004\020\251\001\002" +
    "\000\006\007\241\014\242\001\002\000\006\007\244\014" +
    "\245\001\002\000\004\020\243\001\002\000\014\006\uffc1" +
    "\022\uffc1\024\uffc1\027\uffc1\031\uffc1\001\002\000\004\014" +
    "\247\001\002\000\004\020\246\001\002\000\014\006\uffbf" +
    "\022\uffbf\024\uffbf\027\uffbf\031\uffbf\001\002\000\004\020" +
    "\250\001\002\000\014\006\uffbd\022\uffbd\024\uffbd\027\uffbd" +
    "\031\uffbd\001\002\000\014\006\uffc3\022\uffc3\024\uffc3\027" +
    "\uffc3\031\uffc3\001\002\000\014\006\uffc5\022\uffc5\024\uffc5" +
    "\027\uffc5\031\uffc5\001\002\000\014\006\uffc7\022\uffc7\024" +
    "\uffc7\027\uffc7\031\uffc7\001\002\000\014\006\uffc9\022\uffc9" +
    "\024\uffc9\027\uffc9\031\uffc9\001\002\000\006\007\144\017" +
    "\146\001\002\000\004\014\257\001\002\000\004\025\260" +
    "\001\002\000\004\005\160\001\002\000\016\006\ufff3\011" +
    "\ufff3\022\ufff3\024\ufff3\030\ufff3\031\ufff3\001\002\000\004" +
    "\027\265\001\002\000\006\011\023\030\021\001\002\000" +
    "\004\027\uffe4\001\002\000\004\013\266\001\002\000\006" +
    "\007\144\017\146\001\002\000\004\014\270\001\002\000" +
    "\004\020\271\001\002\000\016\006\ufff2\011\ufff2\022\ufff2" +
    "\024\ufff2\030\ufff2\031\ufff2\001\002\000\016\007\030\011" +
    "\023\022\022\024\017\030\021\031\016\001\002\000\004" +
    "\006\274\001\002\000\004\021\275\001\002\000\004\002" +
    "\ufffc\001\002\000\006\036\277\037\300\001\002\000\004" +
    "\007\334\001\002\000\010\032\302\033\301\034\303\001" +
    "\002\000\004\020\324\001\002\000\004\020\314\001\002" +
    "\000\004\020\304\001\002\000\006\005\uffdc\012\305\001" +
    "\002\000\004\007\306\001\002\000\004\037\307\001\002" +
    "\000\006\032\311\033\310\001\002\000\004\020\313\001" +
    "\002\000\004\020\312\001\002\000\004\005\uffd6\001\002" +
    "\000\004\005\uffd4\001\002\000\006\005\uffe3\012\315\001" +
    "\002\000\004\007\316\001\002\000\004\037\317\001\002" +
    "\000\006\033\320\034\321\001\002\000\004\020\323\001" +
    "\002\000\004\020\322\001\002\000\004\005\uffd7\001\002" +
    "\000\004\005\uffd9\001\002\000\006\005\uffdf\012\325\001" +
    "\002\000\004\007\326\001\002\000\004\037\327\001\002" +
    "\000\006\032\330\034\331\001\002\000\004\020\333\001" +
    "\002\000\004\020\332\001\002\000\004\005\uffd5\001\002" +
    "\000\004\005\uffd8\001\002\000\006\036\335\037\336\001" +
    "\002\000\004\007\345\001\002\000\010\032\340\033\337" +
    "\034\341\001\002\000\004\020\344\001\002\000\004\020" +
    "\343\001\002\000\004\020\342\001\002\000\004\005\uffdb" +
    "\001\002\000\004\005\uffe2\001\002\000\004\005\uffde\001" +
    "\002\000\006\036\346\037\347\001\002\000\004\007\356" +
    "\001\002\000\010\032\351\033\350\034\352\001\002\000" +
    "\004\020\355\001\002\000\004\020\354\001\002\000\004" +
    "\020\353\001\002\000\004\005\uffda\001\002\000\004\005" +
    "\uffe1\001\002\000\004\005\uffdd\001\002\000\004\037\357" +
    "\001\002\000\004\032\360\001\002\000\004\020\361\001" +
    "\002\000\004\005\uffe0\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\024\005\025" +
    "\006\017\013\023\001\001\000\006\005\262\012\261\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\105\013\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\110\001\001\000\006\006\107\013\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\156\001\001\000\002" +
    "\001\001\000\010\005\164\007\163\013\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\201\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\255\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\260" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\263\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\266\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\272\005\025\006\017\013\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info)  {
        System.out.println("Warning - " + message);
    }
    public void syntax_error(Symbol s){
            report_error("Erro sintatico na sentença. Linha: " +(s.right + 1) +
            " - Coluna: " + s.left + ". Texto: \"" + s.value + "\"", null);
            // public static void carregar(String arquivo) throws Exception{
            // new parser(new Yylex(new FileInputStream(arquivo))).parse();
            String retorno = "Erro sintatico na senteca. Linha: " +(s.right + 1) +" - Coluna: " + s.left + ". Texto: \"" + s.value + "\"\n";
        it.setRetornoLexico(retorno);
    }

    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ENTRADASAIDA ::= saida abrepar var var var var var var var fechapar fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENTRADASAIDA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ENTRADASAIDA ::= entrada abrepar var var var var var var var fechapar fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENTRADASAIDA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ENTRADASAIDA ::= saida abrepar var var var var var var fechapar fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENTRADASAIDA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ENTRADASAIDA ::= entrada abrepar var var var var var var fechapar fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENTRADASAIDA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ENTRADASAIDA ::= saida abrepar var var var var var fechapar fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENTRADASAIDA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ENTRADASAIDA ::= entrada abrepar var var var var var fechapar fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENTRADASAIDA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ENTRADASAIDA ::= saida abrepar var var var var fechapar fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENTRADASAIDA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ENTRADASAIDA ::= entrada abrepar var var var var fechapar fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENTRADASAIDA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ENTRADASAIDA ::= saida abrepar var var var fechapar fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENTRADASAIDA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ENTRADASAIDA ::= entrada abrepar var var var fechapar fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENTRADASAIDA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ENTRADASAIDA ::= saida abrepar var var fechapar fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENTRADASAIDA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ENTRADASAIDA ::= entrada abrepar var var fechapar fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENTRADASAIDA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ENTRADASAIDA ::= saida abrepar var fechapar fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENTRADASAIDA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ENTRADASAIDA ::= entrada abrepar var fechapar fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENTRADASAIDA",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ATRIBUIVALORVARIAVEL ::= var atribui valor fimdelinha var atribui valor fimdelinha var atribui valor fimdelinha var atribui valor fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIBUIVALORVARIAVEL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ATRIBUIVALORVARIAVEL ::= var atribui var operaciona valor fimdelinha var atribui var operaciona var fimdelinha var atribui var operaciona valor fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIBUIVALORVARIAVEL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ATRIBUIVALORVARIAVEL ::= var atribui valor fimdelinha var atribui valor fimdelinha var atribui valor fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIBUIVALORVARIAVEL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ATRIBUIVALORVARIAVEL ::= var atribui var operaciona var fimdelinha var atribui var operaciona valor fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIBUIVALORVARIAVEL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ATRIBUIVALORVARIAVEL ::= var atribui valor operaciona var fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIBUIVALORVARIAVEL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ATRIBUIVALORVARIAVEL ::= var atribui var operaciona valor fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIBUIVALORVARIAVEL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ATRIBUIVALORVARIAVEL ::= var atribui var operaciona var fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIBUIVALORVARIAVEL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ATRIBUIVALORVARIAVEL ::= var atribui valor fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIBUIVALORVARIAVEL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ATRIBUIVALORVARIAVEL ::= var atribui var fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATRIBUIVALORVARIAVEL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARAVARIAVEL ::= declaravari var doispontos p_real fimdelinha declaravari var doispontos p_str fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARAVARIAVEL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARAVARIAVEL ::= declaravari var doispontos p_str fimdelinha declaravari var doispontos p_real fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARAVARIAVEL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARAVARIAVEL ::= declaravari var doispontos p_real fimdelinha declaravari var doispontos p_int fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARAVARIAVEL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARAVARIAVEL ::= declaravari var doispontos p_int fimdelinha declaravari var doispontos p_real fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARAVARIAVEL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARAVARIAVEL ::= declaravari var doispontos p_str fimdelinha declaravari var doispontos p_int fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARAVARIAVEL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARAVARIAVEL ::= declaravari var doispontos p_int fimdelinha declaravari var doispontos p_str fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARAVARIAVEL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARAVARIAVEL ::= declaravari var virgula var virgula var doispontos p_real fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARAVARIAVEL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARAVARIAVEL ::= declaravari var virgula var doispontos p_real fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARAVARIAVEL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARAVARIAVEL ::= declaravari var doispontos p_real fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARAVARIAVEL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARAVARIAVEL ::= declaravari var virgula var virgula var doispontos p_str fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARAVARIAVEL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARAVARIAVEL ::= declaravari var virgula var doispontos p_str fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARAVARIAVEL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARAVARIAVEL ::= declaravari var doispontos p_str fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARAVARIAVEL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARAVARIAVEL ::= declaravari var virgula var virgula var virgula var doispontos p_int fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARAVARIAVEL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARAVARIAVEL ::= declaravari var virgula var virgula var doispontos p_int fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARAVARIAVEL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARAVARIAVEL ::= declaravari var virgula var doispontos p_int fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARAVARIAVEL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARAVARIAVEL ::= declaravari var doispontos p_int fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARAVARIAVEL",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTEUDOREPITA ::= ATRIBUIVALORVARIAVEL ENTRADASAIDA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTEUDOREPITA",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTEUDOIFWHILE ::= inicio CONDICAO2 ATRIBUIVALORVARIAVEL fim fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTEUDOIFWHILE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTEUDOIFWHILE ::= inicio ENTRADASAIDA fim fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTEUDOIFWHILE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTEUDOIFWHILE ::= inicio ATRIBUIVALORVARIAVEL fim fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTEUDOIFWHILE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTEUDOIFWHILE ::= inicio fim fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTEUDOIFWHILE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONTEUDOCONDICAO ::= valor igual valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTEUDOCONDICAO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONTEUDOCONDICAO ::= valor igual var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTEUDOCONDICAO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONTEUDOCONDICAO ::= var igual valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTEUDOCONDICAO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONTEUDOCONDICAO ::= var igual var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTEUDOCONDICAO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONTEUDOCONDICAO ::= valor relaciona valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTEUDOCONDICAO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONTEUDOCONDICAO ::= valor relaciona var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTEUDOCONDICAO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONTEUDOCONDICAO ::= var relaciona valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTEUDOCONDICAO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONTEUDOCONDICAO ::= var relaciona var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTEUDOCONDICAO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONDICAO2 ::= se abrepar CONTEUDOCONDICAO fechapar entao CONTEUDOIFWHILE se abrepar CONTEUDOCONDICAO fechapar entao CONTEUDOIFWHILE se abrepar CONTEUDOCONDICAO fechapar entao CONTEUDOIFWHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICAO2",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONDICAO ::= repita CONTEUDOREPITA ate abrepar CONTEUDOCONDICAO fechapar fimdelinha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICAO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONDICAO ::= enquanto abrepar CONTEUDOCONDICAO fechapar faca CONTEUDOIFWHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICAO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONDICAO ::= se abrepar CONTEUDOCONDICAO fechapar entao CONTEUDOIFWHILE senao CONTEUDOIFWHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICAO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONDICAO ::= se abrepar CONTEUDOCONDICAO fechapar entao CONTEUDOIFWHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICAO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONTEUDO ::= ATRIBUIVALORVARIAVEL CONDICAO CONDICAO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTEUDO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONTEUDO ::= ATRIBUIVALORVARIAVEL CONDICAO ENTRADASAIDA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTEUDO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTEUDO ::= ATRIBUIVALORVARIAVEL ENTRADASAIDA CONDICAO ENTRADASAIDA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTEUDO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTEUDO ::= ENTRADASAIDA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTEUDO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTEUDO ::= CONDICAO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTEUDO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONTEUDO ::= ATRIBUIVALORVARIAVEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTEUDO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // START ::= algoritmo var fimdelinha DECLARAVARIAVEL inicio CONTEUDO fim pontofinal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // START ::= algoritmo var fimdelinha inicio CONTEUDO fim pontofinal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // START ::= algoritmo var fimdelinha inicio fim pontofinal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // START ::= algoritmo inicio fim pontofinal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= algoritmo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

